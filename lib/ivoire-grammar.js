// Generated by CoffeeScript 1.9.3
(function() {
  "use strict";
  var GrammarGenerator, Handlebars, Ivoire, _;

  Ivoire = require('ivoire-weighted-choice');

  Handlebars = require('handlebars');

  _ = require('lodash');

  Ivoire.train_grammar = function(frames_obj, categories) {
    var compiled_categories, frames, result, weights;
    Ivoire.assert(_.keys(frames_obj).length > 0, "Must give at least one frame");
    weights = [];
    frames = [];
    _.each(frames_obj, function(weight, frame) {
      weights.push(weight);
      return frames.push(Handlebars.compile(frame));
    });
    compiled_categories = {};
    _.each(categories, function(choices, category) {
      return compiled_categories[category] = _.map(choices, function(choice) {
        return Handlebars.compile(choice);
      });
    });
    result = {
      frames: frames,
      weights: weights,
      categories: compiled_categories
    };
    return result;
  };

  Ivoire.prototype.get_grammar_generator = function(training_data) {
    return new GrammarGenerator(this, training_data);
  };

  GrammarGenerator = (function() {
    function GrammarGenerator(ivoire, arg) {
      this.ivoire = ivoire;
      this.frames = arg.frames, this.weights = arg.weights, this.categories = arg.categories;
    }

    GrammarGenerator.prototype.generate = function() {
      var context, frame;
      frame = this.ivoire.weighted_choice(this.frames, this.weights);
      context = {};
      _.each(this.categories, (function(_this) {
        return function(word_list, category) {
          return context[category] = _this.ivoire.pick(word_list);
        };
      })(this));
      return frame(context);
    };

    return GrammarGenerator;

  })();

  module.exports = Ivoire;

}).call(this);
